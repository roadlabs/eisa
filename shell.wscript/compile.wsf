<!--
	It is hard to build a LFC compiler in CommonJS environment, ergo, I wrote something for WSH. 
	Here's its usage:
	
	X:\eisadir\shell.wscript\> cscript compile.wsf inputfile > outputfile

	The output file is written in UTF-16.
-->
<job id="compile">
	<script src="../eisa.rt.js" type="text/javascript"></script>
	<script type="text/javascript">
		eisa.compileTime = eisa.dev.compileTime = true;
		eisa.compileOptions = {
			target: WScript.Arguments.Named("target")
		}
	</script>
	<script src="../compiler.rt.js" type="text/javascript"></script>
	<script src="../lfc/lofn.js" type="text/javascript"></script>
	<script src="../compiler.js" type="text/javascript"></script>
	<script src="../lib/stl.js" type="text/javascript"></script>
	<script src="../lib/async.js" type="text/javascript"></script>
	<script src="../lib/stdenum.js" type="text/javascript"></script>
	<script src="libfs.js"></script>
	<script type="text/javascript">
		var wshfs = EISA_eisa.libmod.library('fs.wsh');
		var getText = wshfs.getText;
		var libs = [];
		var script = new eisa.Script(getText(WScript.Arguments.Unnamed(0)), eisa.languages.lofn, null, libs, function(){
			var r = script.compile();
			WScript.Echo("eisa.using(['stl','mod'], function(_enum, vals){" + r.generatedSource + ".call(vals) })");
		})
	</script>
</job>
